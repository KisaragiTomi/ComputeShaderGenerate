#include "/Engine/Public/Platform.ush"
#include "General.usf"

#ifndef MAX_HEIGHT
#define MAX_HEIGHT 10000
#endif

#ifndef THREADGROUPSIZE_X
#define THREADGROUPSIZE_X 256
#endif

#ifndef THREADGROUPSIZE_Y
#define THREADGROUPSIZE_Y 1
#endif

#ifndef SHAREFIND
#define SHAREFIND 1
#endif

#ifndef EXTENTGENERATEMASK
#define EXTENTGENERATEMASK 2
#endif

#ifndef SHARETEXTURESIZE
#define SHARETEXTURESIZE 48
#endif


float HeightOffset;
float RandomRotator;
float Size;
int SelectIndex;


Texture2D T_FilterResult;
Texture2D T_CurrentSceneDepth;//T_CurrentSceneDepth   .x = SceneDepth .y = ungeneratemask .z = generatemask
Texture2D T_SceneDepth;
Texture2D T_TMeshDepth;
Texture2D T_TMeshDepth2;
Texture2D T_SceneNormal;
Texture2D T_ObjectNormal;
Texture2D T_TargetHeight;
Texture2D T_ObjectDepth;
Texture2D T_Result;
Texture2DArray<float4> TA_MeshHeight;
RWTexture2D<float4> RW_CurrentSceneDepth;
RWTexture2D<float4> RW_CurrentSceneDepthA;
RWTexture2D<float4> RW_CurrentSceneDepthB;
RWTexture2D<float4> RW_TargetHeight;
RWTexture2D<float4> RW_DebugView;
RWTexture2D<float4> RW_Result;
RWTexture2D<float4> RW_ResultA;
RWTexture2D<float4> RW_ResultB;
RWTexture2D<float4> RW_FilterResult;// .x = HeightTestCount, .y = Size / 2, .z = NumberX, .w = NumberY;
RWTexture2D<float4> RW_SaveRotateScale;
RWTexture2D<float4> RW_FilterResulteMult;

RWTexture2D<float4> RW_TempA;
RWTexture2D<float4> RW_TempB;
RWTexture2D<float4> RW_Deduplication;
RWBuffer<float4> RW_FindPixelBuffer;
RWBuffer<uint2> RW_FindPixelBufferResult_Number;
RWBuffer<uint> RW_FindPixelBufferResult_NumberCount;

SamplerState Sampler;

static const uint2 NeighbourOffset[4] = {
    uint2(0, 1),   
    uint2(0, -1), 
    uint2(-1, 0), 
    uint2(1, 0)   
};

groupshared half2 shareMhalf2[THREADGROUPSIZE_X + 2][THREADGROUPSIZE_Y + 2];
//T_TargetHeight .x : Height .y : GenerateMask
void GenerateTargetHeight(uint3 DispatchThreadId, uint3 GroupThreadId, uint3 GroupID)
{
    float MaxCell;
    T_SceneDepth.GetDimensions(MaxCell, MaxCell);
    MaxCell -= 1;
    
    int PixelBoundSize = 1;
    int2 globalPos = DispatchThreadId.xy;
    
    shareMhalf2[GroupThreadId.x + PixelBoundSize][GroupThreadId.y + PixelBoundSize] = T_TargetHeight[DispatchThreadId.xy].xy;
 
    if (GroupThreadId.x < PixelBoundSize)
    {
        int2 FillPos = globalPos - int2(PixelBoundSize, 0);
        shareMhalf2[GroupThreadId.x][GroupThreadId.y + PixelBoundSize] = T_TargetHeight[clamp(FillPos, int2(0,0), MaxCell)].xy;
    }
       
    if (GroupThreadId.x >= THREADGROUPSIZE_X - PixelBoundSize)
    {
        int2 FillPos = globalPos + int2(PixelBoundSize, 0);
        shareMhalf2[GroupThreadId.x + PixelBoundSize * 2][GroupThreadId.y + PixelBoundSize] = T_TargetHeight[clamp(FillPos, int2(0,0), MaxCell)].xy;
    }
      
    if (GroupThreadId.y < PixelBoundSize)
    {
        int2 FillPos = globalPos - int2(0, PixelBoundSize);
        shareMhalf2[GroupThreadId.x + PixelBoundSize][GroupThreadId.y] = T_TargetHeight[clamp(FillPos, int2(0,0), MaxCell)].xy;
    }
     
    if (GroupThreadId.y >= THREADGROUPSIZE_X - PixelBoundSize)
    {
        int2 FillPos = globalPos + int2(0, PixelBoundSize);
        shareMhalf2[GroupThreadId.x + PixelBoundSize][GroupThreadId.y + PixelBoundSize * 2] = T_TargetHeight[clamp(FillPos, int2(0,0), MaxCell)].xy;
    }
	
    
    GroupMemoryBarrierWithGroupSync();
    
    for (int i = 0; i < THREADGROUPSIZE_X * 2; i ++)
    {
        float2 CurrentShareMHeight = shareMhalf2[GroupThreadId.x + PixelBoundSize][GroupThreadId.y + PixelBoundSize];
        if (CurrentShareMHeight.y < 1) continue; 
        for (int n = 0; n < 4; n++)
        {
            uint2 Offset = GroupThreadId.xy + PixelBoundSize + NeighbourOffset[n];
            half2 ShareResult = shareMhalf2[Offset.x][Offset.y];
            if ( ShareResult.y < 1 && ShareResult.x > CurrentShareMHeight.x )
            {
                ShareResult.y = 0;
                shareMhalf2[GroupThreadId.x + PixelBoundSize][GroupThreadId.y + PixelBoundSize] = ShareResult;
            }
        }
        GroupMemoryBarrierWithGroupSync();
    }
    
    RW_TargetHeight[DispatchThreadId.xy] = float4(shareMhalf2[GroupThreadId.x + PixelBoundSize][GroupThreadId.y + PixelBoundSize], 0 ,0);
}

groupshared half3 shareExtenthalf2[THREADGROUPSIZE_X + EXTENTGENERATEMASK * 2][THREADGROUPSIZE_Y + EXTENTGENERATEMASK * 2];

void ExtentGenerateMask(uint3 DispatchThreadId, uint3 GroupThreadId, uint3 GroupID)
{
    float MaxCell;
    T_SceneDepth.GetDimensions(MaxCell, MaxCell);
    MaxCell -= 1;
    
    int PixelBoundSize = EXTENTGENERATEMASK;
    int FindNum = PixelBoundSize * 2;
   
    int2 globalPos = DispatchThreadId.xy;

    float4 CurrentSceneColor = T_CurrentSceneDepth[DispatchThreadId.xy];
  
    shareExtenthalf2[GroupThreadId.x + PixelBoundSize][GroupThreadId.y + PixelBoundSize] = half3(CurrentSceneColor.xz, FindNum);
 
 
    if (GroupThreadId.x < PixelBoundSize)
    {
        int2 FillPos = globalPos - int2(PixelBoundSize, 0);
        shareExtenthalf2[GroupThreadId.x][GroupThreadId.y + PixelBoundSize] = half3(T_CurrentSceneDepth[clamp(FillPos, int2(0,0), MaxCell)].xz, FindNum);
    }
    if (GroupThreadId.x >= THREADGROUPSIZE_X - PixelBoundSize)
    {
        int2 FillPos = globalPos + int2(PixelBoundSize, 0);
        shareExtenthalf2[GroupThreadId.x + PixelBoundSize * 2][GroupThreadId.y + PixelBoundSize] = half3(T_CurrentSceneDepth[clamp(FillPos, int2(0,0), MaxCell)].xz, FindNum);
    }
    if (GroupThreadId.y < PixelBoundSize)
    {
        int2 FillPos = globalPos - int2(0, PixelBoundSize);
        shareExtenthalf2[GroupThreadId.x + PixelBoundSize][GroupThreadId.y] = half3(T_CurrentSceneDepth[clamp(FillPos, int2(0,0), MaxCell)].xz, FindNum);
    }
    if (GroupThreadId.y >= THREADGROUPSIZE_X - PixelBoundSize)
    {
        int2 FillPos = globalPos + int2(0, PixelBoundSize);
        shareExtenthalf2[GroupThreadId.x + PixelBoundSize][GroupThreadId.y + PixelBoundSize * 2] = half3(T_CurrentSceneDepth[clamp(FillPos, int2(0,0), MaxCell)].xz, FindNum);
    }
    
    GroupMemoryBarrierWithGroupSync();
    
    for (int i = 0; i < THREADGROUPSIZE_X * 2; i ++)
    {
        half3 CurrentShareMHeight = shareExtenthalf2[GroupThreadId.x + PixelBoundSize][GroupThreadId.y + PixelBoundSize];
        if (CurrentShareMHeight.y > 0 || CurrentShareMHeight.z <= 0) continue; 
        for (int n = 0; n < 4; n++)
        {
            uint2 Offset = GroupThreadId.xy + PixelBoundSize + NeighbourOffset[n];
            half3 ShareResult = shareExtenthalf2[Offset.x][Offset.y];
            if ( ShareResult.y > 0 && ShareResult.x < CurrentShareMHeight.x && ShareResult.z > 0)
            {
                ShareResult.z -= 1;
                shareExtenthalf2[GroupThreadId.x + PixelBoundSize][GroupThreadId.y + PixelBoundSize].y = ShareResult.y;
                shareExtenthalf2[GroupThreadId.x + PixelBoundSize][GroupThreadId.y + PixelBoundSize].z = ShareResult.z;
            }
        }
        GroupMemoryBarrierWithGroupSync();
    }
    
    RW_CurrentSceneDepth[DispatchThreadId.xy].z = shareExtenthalf2[GroupThreadId.x + PixelBoundSize][GroupThreadId.y + PixelBoundSize].y;
}



void InitCurrentSceneDepth(uint3 DispatchThreadId, uint3 GroupThreadId, uint3 GroupID)
{
    
    float3 SceneNormal = T_SceneNormal[DispatchThreadId.xy].xyz;
    float ObjHeight = MAX_HEIGHT - min(T_ObjectDepth[DispatchThreadId.xy].x, 10000);
    

    float Height = MAX_HEIGHT - T_SceneDepth[DispatchThreadId.xy].x;
    float UnGenerateMask = (T_ObjectNormal[DispatchThreadId.xy].z > 0.01) && (ObjHeight > Height);
    float GenerateMask = dot(SceneNormal, float3(0, 0, 1)) < .75 && dot(SceneNormal, float3(0, 0, 1)) > 0;
    float Rotate = atan2(SceneNormal.y, SceneNormal.x);
    RW_CurrentSceneDepth[DispatchThreadId.xy] = float4(Height, UnGenerateMask, GenerateMask, 0);
    RW_TargetHeight[DispatchThreadId.xy].x = T_TargetHeight[DispatchThreadId.xy].x;
    RW_TargetHeight[DispatchThreadId.xy].y = GenerateMask;
    RW_TargetHeight[DispatchThreadId.xy].z = Rotate;
}

void InitCalTargetHeight(uint3 DispatchThreadId, uint3 GroupThreadId, uint3 GroupID)
{
    float3 SceneNormal = T_SceneNormal[DispatchThreadId.xy].xyz;
    float ObjHeight = MAX_HEIGHT - min(T_ObjectDepth[DispatchThreadId.xy].x, 10000);
    

    float Height = MAX_HEIGHT - T_SceneDepth[DispatchThreadId.xy].x;
    float UnGenerateMask = (T_ObjectNormal[DispatchThreadId.xy].z > 0.01) && (ObjHeight > Height);
    float GenerateMask = dot(SceneNormal, float3(0, 0, 1)) < .75 && dot(SceneNormal, float3(0, 0, 1)) > 0;

    
    RW_CurrentSceneDepth[DispatchThreadId.xy] = float4(Height, UnGenerateMask, GenerateMask, 0);
    RW_TargetHeight[DispatchThreadId.xy] = float4(Height, GenerateMask, 0, 0);
    
}

groupshared half ShareMeshHeight[THREADGROUPSIZE_X][THREADGROUPSIZE_Y];
groupshared half CompareReuslt[THREADGROUPSIZE_X][THREADGROUPSIZE_Y];
groupshared half SceneTest[THREADGROUPSIZE_X][THREADGROUPSIZE_Y];
groupshared half4 SelectData[THREADGROUPSIZE_X][THREADGROUPSIZE_Y];
void MeshFillVerticalRock(uint3 DispatchThreadId, uint3 GroupThreadId, uint3 GroupID)
{
    float MaxCell;
    RW_CurrentSceneDepthA.GetDimensions(MaxCell, MaxCell);
    float2 UV = DispatchThreadId.xy / MaxCell;

    float2 GroupUV = GroupThreadId.xy / float(THREADGROUPSIZE_X);
    
    uint3 MeshUVMaxCell;
    TA_MeshHeight.GetDimensions(MeshUVMaxCell.x, MeshUVMaxCell.y, MeshUVMaxCell.z);
    
    uint2 MaxResult = 0;
    RW_ResultA.GetDimensions(MaxResult.x, MaxResult.y);

    //Init
    RW_ResultB[DispatchThreadId.xy] = RW_ResultA[DispatchThreadId.xy];
    RW_CurrentSceneDepthB[DispatchThreadId.xy] = RW_CurrentSceneDepthA[DispatchThreadId.xy];
    RW_FilterResult[DispatchThreadId.xy] = 0;
    RW_SaveRotateScale[DispatchThreadId.xy] = 0;
    RW_DebugView[DispatchThreadId.xy].xy = 0;
    
    // float4 MeshHeightColor = TA_MeshHeight.SampleLevel(Sampler, float3(UV, 1), 0);
    // RW_DebugView[DispatchThreadId.xy] = MeshHeightColor;
    
    float4 RootSceneColor = RW_CurrentSceneDepthA[DispatchThreadId.xy];
    float4 ResultIndex = RW_ResultA[uint2(MaxResult.x - 1, MaxResult.y - 1)];
    float4 TargetHeightColor = RW_TargetHeight[DispatchThreadId.xy];
    float Rotate = TargetHeightColor.z + RandomRotator;
    float TargetHeight = TargetHeightColor.x;
    float RootGenerateMask = RootSceneColor.z;
    float RootUnGenerateMask = RootSceneColor.y;
    
    CompareReuslt[GroupThreadId.x][GroupThreadId.y] = 0;
    ShareMeshHeight[GroupThreadId.x][GroupThreadId.y] = 0;

    uint3 MeshUV3D = float3(GroupUV * MeshUVMaxCell.xy, SelectIndex);
    float4 MeshHeightColor = TA_MeshHeight[MeshUV3D];
    ShareMeshHeight[GroupThreadId.x][GroupThreadId.y] = MeshHeightColor.x;

    float UnGenerateMaskCount = 0;
    float GenerateMaskCount = 0;
    float MaxIndex = THREADGROUPSIZE_X;
    float MaxCount = MaxIndex * MaxIndex;
    float MeshStep = Size / MaxIndex;
    int VoidCount = 0;
    
    float2 MeshUV = float2(GroupThreadId.x / MaxIndex, GroupThreadId.y / MaxIndex);
    MeshUV = RotUVCenter(MeshUV, .3, 0.5 );
    MeshUV = uint2((MeshUV.x * MaxIndex) , (MeshUV.y * MaxIndex) );
    // RW_DebugView[DispatchThreadId.xy] = ShareMeshHeight[MeshUV.x][MeshUV.y];
    
    GroupMemoryBarrierWithGroupSync();
    
    bool MaskCheck = (RootGenerateMask == 0 || RootUnGenerateMask > 0);
    if (MaskCheck && (GroupThreadId.x != 0 || GroupThreadId.y != 0)) return;

    float HeightFix = 0;
    LOOP
    for(float Y = 0; Y < MaxIndex; Y++)
    {
        for(float X = 0; X < MaxIndex; X++)
        {
            //Sample Mesh Height
            //To avoid sampling multiple pixels, otherwise invalid data maybe judged as usable height.
            float2 MeshUV = float2(X / MaxIndex, Y / MaxIndex);
            
            MeshUV = clamp(uint2(MeshUV.x * MaxIndex, MeshUV.y * MaxIndex ), 0, MaxIndex - 1);
            float ReadMeshHeight = ShareMeshHeight[MeshUV.x][MeshUV.y];

            BRANCH
            if (ReadMeshHeight < -10000 ) continue;
            
            float MeshHeight =  ReadMeshHeight + TargetHeight;
            VoidCount += 1;

            //Sample Scene Height
            //To avoid sampling multiple pixels, otherwise invalid data maybe judged as usable height.
            float2 TestUV = float2(UV.x + (X - MaxIndex/2) * MeshStep, UV.y + (Y - MaxIndex/2) * MeshStep);
            TestUV = RotUVCenter(TestUV, Rotate, UV );
            float4 CheckCurrentSceneColor = RW_CurrentSceneDepthA[clamp(uint2(TestUV.x * MaxCell, TestUV.y * MaxCell ), 0, MaxCell - 1)];
            float CurrentSceneHight =  CheckCurrentSceneColor.x;
            float GenerateMask = CheckCurrentSceneColor.z;
            float UnGenerateMask = CheckCurrentSceneColor.y;
            
            //CheckBound
            BRANCH
            if ((TestUV.x > 1 || TestUV.y > 1 || TestUV.x < 0 || TestUV.y < 0) && (GroupThreadId.x != 0 || GroupThreadId.y != 0)) return;
            
            //CheckHeight
            // if(TargetHeight > CurrentSceneHight && GenerateMask == 0) return;
            // [branch]
            // if(TargetHeight + MeshHeight.x > TargetHeight + 50 ) continue;

            // RW_DebugView[uint2(MeshUV.x * 256, MeshUV.y * 256)] = 1;
            
            //CheckMask When the GenerateMask Count of two objects are equals, I need to consider UnGenerateMask Count
            UnGenerateMaskCount += UnGenerateMask > 0;
            GenerateMaskCount +=
                (GenerateMask > 0)
            && (UnGenerateMask == 0)
            && (MeshHeight > CurrentSceneHight)
            ;
            HeightFix = max(HeightFix, CurrentSceneHight - MeshHeight);
            // if ((GroupThreadId.x == 0 && GroupThreadId.y == 0)) return;
            // RW_DebugView[uint2(TestUV.x * 256, TestUV.y * 256)] = ReadMeshHeight > 1;
        }
    }
    HeightFix *= .5;
    TargetHeight += HeightFix + HeightOffset;
    //Check how many effective samples there are
    GenerateMaskCount = GenerateMaskCount > 3 ? GenerateMaskCount : 0;
    GenerateMaskCount = UnGenerateMaskCount / VoidCount < .95 ? GenerateMaskCount : 0;
    GenerateMaskCount = MaskCheck ? 0 : GenerateMaskCount;
    UnGenerateMaskCount = MaskCheck ? 0 : UnGenerateMaskCount;
    RW_DebugView[DispatchThreadId.xy] = float4(GenerateMaskCount, UnGenerateMaskCount, 0, 0) / MaxCount;
    
    
    SceneTest[GroupThreadId.x][GroupThreadId.y] = RW_CurrentSceneDepthA[DispatchThreadId.xy].y;
    CompareReuslt[GroupThreadId.x][GroupThreadId.y] = GenerateMaskCount > 0 ? GenerateMaskCount * MaxCount - UnGenerateMaskCount : 0;
    SelectData[GroupThreadId.x][GroupThreadId.y] = float4(Rotate, Size, TargetHeight, SelectIndex);
    
    GroupMemoryBarrierWithGroupSync();
    
    float4 DebugValue = float4(GenerateMaskCount, UnGenerateMaskCount, 0, 0);
    
    if (GroupThreadId.x != 0 || GroupThreadId.y != 0) return;
    
    //TODO Select Multiple potentially valid pixels
    float3 SelectResult = float3(0, 0, 0);
    LOOP
    for(float Y = 0; Y < MaxIndex; Y++)
    {
        for(float X = 0; X < MaxIndex; X++)
        {
            float ResultValue = CompareReuslt[X][Y];
            float CurrentValuse = SelectResult.x;
            SelectResult = ResultValue > CurrentValuse? float3(ResultValue, X, Y) : SelectResult;

            // uint2 SelectResultIndex = uint2(GroupID.x * MaxIndex + X, GroupID.y * MaxIndex + Y);
            uint2 SelectResultIndex = uint2(GroupID.x * MaxIndex + X, GroupID.y * MaxIndex + Y);
            RW_DebugView[SelectResultIndex].z = 1;
        }
    }
    
    if (SelectResult.x == 0 ) return;
    
    float ResultValue = SelectResult.x;
    float ResultIndexX = SelectResult.y;
    float ResultIndexY = SelectResult.z;
    float ResultRotate = SelectData[ResultIndexX][ResultIndexY].x;
    float ResultSize = SelectData[ResultIndexX][ResultIndexY].y;
    float ResultHeight = SelectData[ResultIndexX][ResultIndexY].z;
    float ResultMeshIndex = SelectData[ResultIndexX][ResultIndexY].w;
    uint2 SelectResultIndex = uint2(GroupID.x * MaxIndex + ResultIndexX, GroupID.y * MaxIndex + ResultIndexY);
    float4 FilterResult = float4(ResultValue, 0, SelectResultIndex);
    float4 SaveData = float4(ResultRotate, ResultSize, ResultHeight, ResultMeshIndex);
    RW_FilterResult[GroupID.xy] = FilterResult;
    RW_SaveRotateScale[SelectResultIndex] = SaveData;
}

groupshared half4 SharedMaxRW[THREADGROUPSIZE_X][THREADGROUPSIZE_Y];
groupshared half SharedDeduplication[THREADGROUPSIZE_X][THREADGROUPSIZE_Y];
groupshared uint Counter;
void FindBestPixelInRW(uint3 DispatchThreadId, uint3 GroupThreadId ,uint3 GroupId, uint GroupIndex)
{
    Counter = 0;
    float HeightMapMaxCell = 0;
    RW_CurrentSceneDepthA.GetDimensions(HeightMapMaxCell, HeightMapMaxCell);
    
    SharedDeduplication[GroupThreadId.x][GroupThreadId.y] = -1;
    
    float MaxCell = 0;
    RW_FilterResult.GetDimensions(MaxCell, MaxCell);

    float4 FilterResultColor = RW_FilterResult[GroupThreadId.xy];
    float CompareValue = FilterResultColor.x;
    SharedMaxRW[GroupThreadId.x][GroupThreadId.y] = FilterResultColor;
    SharedMaxRW[GroupThreadId.x][GroupThreadId.y].y = CompareValue > 0 ? GroupIndex : -1;
    
    GroupMemoryBarrierWithGroupSync(); 
    
    
    float4 ShareDataA = SharedMaxRW[GroupThreadId.x][GroupThreadId.y];
    uint2 SaveDataIndexA = ShareDataA.zw;
    float4 SaveDataA = RW_SaveRotateScale[SaveDataIndexA];
    float CompareValueA = ShareDataA.x;
    float SizeA = SaveDataA.y;
    
    if (CompareValueA <= 0) return;
    
    UNROLL
    for(int Y = -2; Y <= 2; Y++)
    {
        for (int X = -2; X <= 2; X++)
        {
            uint2 Offset = GroupThreadId.xy + uint2(X, Y);
            float4 ShareDataB = SharedMaxRW[Offset.x][Offset.y];
            uint2 SaveDataIndexB = ShareDataB.zw;
            float4 SaveDataB = RW_SaveRotateScale[SaveDataIndexB];
            float CompareValueB = ShareDataB.x;
            float SizeB = SaveDataB.y;
            
            float DistAB = length(SaveDataIndexA / HeightMapMaxCell - SaveDataIndexB / HeightMapMaxCell);
            
            bool IsChange = (CompareValueA < CompareValueB) || (CompareValueA == CompareValueB && (SaveDataIndexA.x + SaveDataIndexA.y * MaxCell <  SaveDataIndexB.x + SaveDataIndexB.y * MaxCell));

            //Since the size value based on the unit of the object's center, only half of it will be used. so it shoud be divide by 2here
            IsChange = DistAB > (SizeA + SizeB) / 2 ? false : IsChange;
            
            IsChange = (X == 0 && Y == 0) ? false : IsChange;
            IsChange = (CompareValueB <= 0) ? false : IsChange;
            IsChange = (Offset.x < 0 || Offset.x >= MaxCell || Offset.y < 0 || Offset.y >= MaxCell) ? false : IsChange;
            
            SharedMaxRW[GroupThreadId.x][GroupThreadId.y] = IsChange ? -1 : SharedMaxRW[GroupThreadId.x][GroupThreadId.y];
        }
    }
    
    GroupMemoryBarrierWithGroupSync();

    float4 ShareData = SharedMaxRW[GroupThreadId.x][GroupThreadId.y];
    uint2 SaveDataIndex = ShareData.zw;
    uint SaveGroupThreadId = ShareData.y;
    RW_DebugView[SaveDataIndex].x = 111;
    // RW_DebugView[FilterResultColor.zw].x = ShareData.y;
    
    //Deduplication
    SharedDeduplication[SaveGroupThreadId % THREADGROUPSIZE_X][SaveGroupThreadId / THREADGROUPSIZE_X] = SaveGroupThreadId >= 0;
    
    GroupMemoryBarrierWithGroupSync();
    
    bool VoidIndex = SharedDeduplication[GroupThreadId.x][GroupThreadId.y] == 1;
    if (!VoidIndex) return;
    
    uint PreValure;
    InterlockedAdd(Counter, 1, PreValure);
    
    uint2 MaxResult = 0;
    RW_ResultA.GetDimensions(MaxResult.x, MaxResult.y);
    float4 ResultIndexColor = RW_ResultA[uint2(MaxResult.x - 1, MaxResult.y - 1)];
    uint ResultIndex = ResultIndexColor.x;
    uint CurrentResultLocation = ResultIndex + PreValure;
    
    if (CurrentResultLocation >= 1023) return;
    
    float2 UV = SaveDataIndex / float(HeightMapMaxCell - 1);
    float4 SaveDataColor = RW_SaveRotateScale[SaveDataIndex];
    float Rotate = SaveDataColor.x;
    float Scale = SaveDataColor.y;
    float SceneHeight = SaveDataColor.z;
    RW_ResultB[uint2(CurrentResultLocation, 0)] = float4(UV.x, UV.y, SceneHeight , 0);
    RW_ResultB[uint2(CurrentResultLocation, 1)] = float4(Rotate, Scale, SelectIndex, 0);
    
    GroupMemoryBarrierWithGroupSync();
    
    RW_ResultB[uint2(MaxResult.x - 1, MaxResult.y - 1)].x = ResultIndex  + Counter;
    RW_ResultB[uint2(MaxResult.x - 1, MaxResult.y - 1)].z = Counter;
    
}



groupshared half4 Result_ShareMeshHeight[SHARETEXTURESIZE][SHARETEXTURESIZE];
void UpdateCurrentSceneMult(uint3 DispatchThreadId, uint3 GroupThreadId ,uint3 GroupId)
{
    
    uint2 MaxResult = 0;
    RW_ResultA.GetDimensions(MaxResult.x, MaxResult.y);
    float4 ResultIndexColor = RW_ResultA[uint2(MaxResult.x - 1, MaxResult.y - 1)];
    uint ResultIndex = ResultIndexColor.x;
    uint MaxResultCount = ResultIndexColor.z;
    
    RW_ResultB[DispatchThreadId.xy] = RW_ResultA[DispatchThreadId.xy];
    
    float MaxCell;
    RW_CurrentSceneDepthA.GetDimensions(MaxCell, MaxCell);
    
    uint MaxShareSize = SHARETEXTURESIZE;
    float3 MeshMaxCell = 0;
    TA_MeshHeight.GetDimensions(MeshMaxCell.x, MeshMaxCell.y, MeshMaxCell.z);
    
    // for (int i = 0; i < 4; i++)
    // {
    //     uint3 TA_MeshIndex = uint3(GroupThreadId.x, GroupThreadId.y, i);
    //     Result_ShareMeshHeight[GroupThreadId.x][GroupThreadId.y][i] = TA_MeshHeight[TA_MeshIndex];
    // }
    
    GroupMemoryBarrierWithGroupSync();
    float4 CurrentSceneDepthColor = RW_CurrentSceneDepthA[DispatchThreadId.xy];
    float CurrentHeight = CurrentSceneDepthColor.x;
    float CurrentMask = CurrentSceneDepthColor.y;
    float CurrentGenerateMask = CurrentSceneDepthColor.z;
    float DebugMask = 0;
    
    for (int i = 0; i < MaxResultCount; i++)
    {
        
        uint CurrentIndex = ResultIndex - i - 1;
        
        float4 ResultPosData = RW_ResultA[uint2(CurrentIndex, 0)];
        float4 ResultRotSizeData = RW_ResultA[uint2(CurrentIndex, 1)];
        float Rotate = ResultRotSizeData.x;
        float Scale = ResultRotSizeData.y;
        float SceneHeight = ResultPosData.z;
        
        float2 UV = (DispatchThreadId.xy + .5) / MaxCell;
        
        UV -= ResultPosData.xy;
        UV = RotUV(UV, Rotate);
        UV = ScaleUV(UV, 1 / Scale) ;
        UV += .5;
        
        if (UV .x > 1 || UV .y > 1 || UV .x < 0 || UV .y < 0)  continue;
        
        float3 MeshUV3D = float3(UV, SelectIndex);
        // uint3 ShareMeshIndex = uint3(MeshUV3D.x * MaxShareSize, MeshUV3D.y * MaxShareSize, SelectIndex);
        // float MeshHeight = Result_ShareMeshHeight[ShareMeshIndex.x][ShareMeshIndex.y][SelectIndex];
        uint3 ShareMeshIndex = uint3(MeshUV3D.x * MeshMaxCell.x, MeshUV3D.y * MeshMaxCell.x, SelectIndex);
        float MeshHeight = TA_MeshHeight[ShareMeshIndex];
        float MeshMsak = MeshHeight > -10000;
        if (!MeshMsak) continue;
        
        float DrawMeshHeight = MeshHeight + SceneHeight * MeshMsak;
        float DrawMask = DrawMeshHeight > CurrentHeight;
        
        float FixDepth = min(max(CurrentHeight, DrawMeshHeight), MAX_HEIGHT);
        float Mask = max(CurrentMask, DrawMask);
        CurrentSceneDepthColor.xyz = float3(FixDepth, Mask, CurrentGenerateMask);
        CurrentHeight = CurrentSceneDepthColor.x;
        CurrentMask = CurrentSceneDepthColor.y;
        CurrentGenerateMask = CurrentSceneDepthColor.z;
        DebugMask = max(DrawMask, DebugMask);
    }
    RW_CurrentSceneDepthB[DispatchThreadId.xy] = CurrentSceneDepthColor;
    RW_DebugView[DispatchThreadId.xy].z = (DebugMask > 0) * .5;
    // RW_DebugView[DispatchThreadId.xy].z = (DebugMask > 0) * .5;
    RW_ResultB[uint2(MaxResult.x - 1, MaxResult.y - 1)] = float4(ResultIndex, ResultIndex, MaxResultCount, 0);
}

[numthreads(THREADGROUPSIZE_X, THREADGROUPSIZE_Y, THREADGROUPSIZE_Z)]
void MeshFillMult(
                        uint3 GroupId : SV_GroupID,
                        uint3 DispatchThreadId : SV_DispatchThreadID,
                        uint3 GroupThreadId : SV_GroupThreadID,
                        uint GroupIndex : SV_GroupIndex) 
{
    
#if FMESHFILL_INIT
    InitCurrentSceneDepth(DispatchThreadId, GroupThreadId, GroupId);
#elif FMESHFILL_INITTARGETHEIGHT
    InitCalTargetHeight(DispatchThreadId, GroupThreadId, GroupId);
#elif FMESHFILL_GENERAL
    InitCurrentSceneDepth(DispatchThreadId, GroupThreadId, GroupId);
    
#elif FMESHFILL_FINDBESTPIXEL
    
#elif FMESHFILL_FINDBESTPIXELRW_512
    FindBestPixelInRW(DispatchThreadId, GroupThreadId, GroupId, GroupIndex);
#elif FMESHFILL_FINDBESTPIXELRW_256
    FindBestPixelInRW(DispatchThreadId, GroupThreadId, GroupId, GroupIndex);
#elif  FMESHFILL_FILLVERTICALROCK
    MeshFillVerticalRock(DispatchThreadId, GroupThreadId, GroupId);
#elif FMESHFILL_FILLCAPPINGROCK

#elif FMESHFILL_TARGETHEIGHT
    GenerateTargetHeight(DispatchThreadId, GroupThreadId, GroupId);

#elif FMESHFILL_UPDATECURRENTHEIGHT
    // UpdateCurrentScene(DispatchThreadId);

#elif FMESHFILL_EXTENTGENERATEMASK
    ExtentGenerateMask(DispatchThreadId, GroupThreadId, GroupId);
#elif FMESHFILL_FILTERRESULTEXTENT

#elif FMESHFILL_FILTERRESULTREDUCE

#elif FMESHFILL_DEDUPLICATION

#elif FMESHFILL_UPDATECURRENTHEIGHTMULT
    UpdateCurrentSceneMult(DispatchThreadId, GroupThreadId, GroupId);
    
#endif
}




void UpdateCurrentScene(uint3 DispatchThreadId)
{
    //RW_DebugView[DispatchThreadId.xy] = RW_SaveRotateScale[DispatchThreadId.xy];
    
    float MaxCell = 0.0;
    uint2 MaxResult = 0;
    RW_ResultA.GetDimensions(MaxResult.x, MaxResult.y);
    float4 ResultIndex = RW_ResultA[uint2(MaxResult.x - 1, MaxResult.y - 1)];
    
    RW_ResultB[DispatchThreadId.xy] = RW_ResultA[DispatchThreadId.xy];
    if (abs(ResultIndex.x - ResultIndex.y) < .01)
        return;
    
    float4 ResultPosData = RW_ResultA[uint2(ResultIndex.x - 1, 0)];
    float4 ResultRotSizeData = RW_ResultA[uint2(ResultIndex.x - 1, 1)];
    
    RW_CurrentSceneDepthA.GetDimensions(MaxCell, MaxCell);
    float2 UV = (DispatchThreadId.xy + .5) / MaxCell;
    
    UV -= ResultPosData.xy;
    UV = RotUV(UV, ResultRotSizeData.x);
    UV = ScaleUV(UV, 1 / ResultRotSizeData.y) ;
    UV += .5;
    
    if (UV .x > 1 || UV .y > 1 || UV .x < 0 || UV .y < 0)  return;
    
    float3 MeshUV3D = float3(UV, SelectIndex);
    float4 MeshHeightColor = TA_MeshHeight.SampleLevel(Sampler, MeshUV3D, 0);
    float4 CurrentSceneDepthColor = RW_CurrentSceneDepthA[DispatchThreadId.xy];
    float MeshHeight = MeshHeightColor.x;
    float MeshMsak = MeshHeight > -10000;
    
    if (!MeshMsak) return;
    
    float RootHeihgt = ResultPosData.z;
    float CurrentHeight = CurrentSceneDepthColor.x;
    float CurrentMask = CurrentSceneDepthColor.y;
    float CurrentGenerateMask = CurrentSceneDepthColor.z;

    float DrawMeshHeight = MeshHeight + RootHeihgt * MeshMsak;
    float DrawMask = DrawMeshHeight > CurrentHeight;
    
    float FixDepth = min(max(CurrentHeight, DrawMeshHeight), MAX_HEIGHT);
    float Mask = max(CurrentMask, DrawMask);
    CurrentSceneDepthColor.xyz = float3(FixDepth, Mask, CurrentGenerateMask);
    RW_CurrentSceneDepthB[DispatchThreadId.xy] = CurrentSceneDepthColor;
    
    // RW_DebugView[DispatchThreadId.xy] = CurrentSceneDepthColor;
    // RW_DebugView[DispatchThreadId.xy].z = DrawMask * 1000;
    //Result.x = Current Count ，Result.y = Pre Count;
    RW_ResultB[uint2(MaxResult.x - 1, MaxResult.y - 1)] = float4(ResultIndex.x, ResultIndex.x, 0, 0);
}
