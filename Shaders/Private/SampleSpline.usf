//#pragma

#include "/Engine/Public/Platform.ush"

#include "General.usf"

#ifndef THREADGROUPSIZE_X
#define THREADGROUPSIZE_X 32
#endif

#ifndef THREADGROUPSIZE_Y
#define THREADGROUPSIZE_Y 32
#endif

#ifndef EXTENTGENERATEMASK
#define EXTENTGENERATEMASK 1
#endif

SamplerState Sampler;


#ifndef GROUPNUM
#define GROUPNUM 8
#endif

#ifndef MAXPOINTSPERCELL
#define MAXPOINTSPERCELL 128
#endif

#ifndef MAXPOINTSPERSPLINE
#define MAXPOINTSPERSPLINE 1024
#endif

struct FCSSPlinePointData
{
	float4 PointData;
	
};

RWTexture2D<float4> RW_OutTexture;
RWTexture2D<float4> RW_DebugView;
RWBuffer<float4> RW_PointsToSampleBuffer;
RWBuffer<int> RW_SplinePointCount;
int NumSpline;
float3 BoundsMin;
float3 BoundsSize;


// groupshared float4 SharePointData[THREADGROUPSIZE_X * THREADGROUPSIZE_X];
// // groupshared int ShareFindNearestPoint[MAXPOINTSPERSPLINE];
// groupshared int PointCounter;
// void AttributeFromSpline(uint3 DispatchThreadId, uint3 GroupThreadId, uint3 GroupId, uint GroupIndex)
// {
// 	float MaxCell;
// 	RW_OutTexture.GetDimensions(MaxCell, MaxCell);
//
// 	const int MaxPointsPerSpline = MAXPOINTSPERSPLINE;
// 	const int PointsPerPixelMax = (MAXPOINTSPERSPLINE + (THREADGROUPSIZE_X * THREADGROUPSIZE_X) - 1) / (THREADGROUPSIZE_X * THREADGROUPSIZE_X);
// 	float2 PointsPerPixel[PointsPerPixelMax];
// 	float2 UV = (DispatchThreadId.xy + .5) / MaxCell;
// 	float2 WorldLocation = BoundsMin + BoundsSize.xy * UV;
// 	float2 UVMin = (GroupThreadId.xy * THREADGROUPSIZE_X + .5) / MaxCell;
// 	float2 UVMax = (min(MaxCell - 1, (GroupThreadId.xy + 1 ) * THREADGROUPSIZE_X) +.5) / MaxCell;
// 	float WorldGroupSize = length(BoundsSize.xy * (UVMax - UVMin));
// 	
// 	float4 SampleResult = 9999999;
// 	for (int i = 0; i < NumSpline; i++)
// 	{
// 		PointCounter = 0;
// 		float NumPoints = RW_SplinePointCount[i];
// 		int NumPointsPerPixel = ceil(NumPoints / (THREADGROUPSIZE_X * THREADGROUPSIZE_X));
// 		// NumPointsPerPixel = 1;
// 		float MinDist = 9999999;
//
// 		int SplineDataNum = MaxPointsPerSpline * i + NumPointsPerPixel * GroupIndex;
// 		if (NumPointsPerPixel * GroupIndex >= NumPoints) continue;
// 		
// 		float4 SplineData = RW_PointsToSampleBuffer[SplineDataNum];
// 		PointsPerPixel[j] = float2(Dist, SplineDataNum);
// 		
// 		ShareReduction[GroupIndex] = MinDist;
// 		GroupMemoryBarrierWithGroupSync();
// 		
// 		for (uint stride = THREADGROUPSIZE_X * THREADGROUPSIZE_X / 2; stride > 0; stride >>= 1) {
// 			if (GroupIndex < stride) {
// 				ShareReduction[GroupIndex] = min(ShareReduction[GroupIndex], ShareReduction[GroupIndex + stride]);
// 			}
// 			GroupMemoryBarrierWithGroupSync();
// 		}
// 		// float waveMin = WaveActiveMin(MinDist);
// 		//
// 		//
// 		// if (WaveIsFirstLane()) {
// 		// 	groupshared float groupMinBuffer[64]; 
// 		// 	groupMinBuffer[WaveGetLaneIndex()] = waveMin;
// 		// 	GroupMemoryBarrierWithGroupSync();
// 		//
// 		// 	// 树状归约（仅第一个 Wave 参与）
// 		// 	if (WaveGetLaneIndex() == 0) {
// 		// 		for (int stride = 32; stride > 0; stride >>= 1) {
// 		// 			if (GroupIndex < stride) {
// 		// 				groupMinBuffer[GroupIndex] = min(
// 		// 					groupMinBuffer[GroupIndex],
// 		// 					groupMinBuffer[GroupIndex + stride]
// 		// 				);
// 		// 			}
// 		// 			GroupMemoryBarrierWithGroupSync();
// 		// 		}
// 		// 		// 最终结果在 groupMinBuffer[0]
// 		// 	}
// 		// }
//
// 		MinDist = ShareReduction[0];
//
// 		for (int j = 0; j < NumPointsPerPixel; j++)
// 		{
// 			float ThreadDist = MinDist + WorldGroupSize;
// 			float2 PointInPixel = PointsPerPixel[j];
// 			float Dist = PointInPixel.x;
// 			int SplineDataNum = PointInPixel.y;
// 			if (Dist < ThreadDist)
// 			{
// 				int PreValue;
// 				InterlockedAdd(PointCounter, 1, PreValue);
// 				ShareFindNearestPoint[PreValue] = SplineDataNum;
// 			}
// 		}
// 		GroupMemoryBarrierWithGroupSync();
// 		MinDist = 999999;
// 		float4 MinDistSplineData = -1;
// 		for (int j = 0; j < PointCounter; j++)
// 		{
// 			int SplineDataNum = ShareFindNearestPoint[j];
// 			float4 SplineData = RW_PointsToSampleBuffer[SplineDataNum];
// 			float Dist = distance(WorldLocation, SplineData.xy);
// 			if (Dist < MinDist)
// 			{
// 				MinDist = min(MinDist, Dist);
// 				MinDistSplineData = SplineData;
// 				MinDistSplineData.z = MinDist;
// 			}
// 		}
// 		float CurrentDist = SampleResult.z;
// 		if (CurrentDist > MinDist)
// 		{
// 			SampleResult = MinDistSplineData;
// 		}
// 		
// 		GroupMemoryBarrierWithGroupSync();
// 	}
// 	// SampleResult.z = 10000;
// 	// SampleResult.z = SampleResult.z > 0 && SampleResult.z < 100;
// 	SampleResult.z /= 100;
// 	RW_OutTexture[DispatchThreadId.xy] = SampleResult;
// 	RW_DebugView[DispatchThreadId.xy] = 1;
// 	
// }

//
// groupshared float ShareReduction[THREADGROUPSIZE_X * THREADGROUPSIZE_X];
// groupshared int ShareFindNearestPoint[MAXPOINTSPERSPLINE];
// groupshared int PointCounter;
// void AttributeFromSpline(uint3 DispatchThreadId, uint3 GroupThreadId, uint3 GroupId, uint GroupIndex)
// {
// 	float MaxCell;
// 	RW_OutTexture.GetDimensions(MaxCell, MaxCell);
//
// 	const int MaxPointsPerSpline = MAXPOINTSPERSPLINE;
// 	const int PointsPerPixelMax = (MAXPOINTSPERSPLINE + (THREADGROUPSIZE_X * THREADGROUPSIZE_X) - 1) / (THREADGROUPSIZE_X * THREADGROUPSIZE_X);
// 	float2 PointsPerPixel[PointsPerPixelMax];
// 	float2 UV = (DispatchThreadId.xy + .5) / MaxCell;
// 	float2 WorldLocation = BoundsMin + BoundsSize.xy * UV;
// 	float2 UVMin = (GroupThreadId.xy * THREADGROUPSIZE_X + .5) / MaxCell;
// 	float2 UVMax = (min(MaxCell - 1, (GroupThreadId.xy + 1 ) * THREADGROUPSIZE_X) +.5) / MaxCell;
// 	float WorldGroupSize = length(BoundsSize.xy * (UVMax - UVMin));
// 	
// 	float4 SampleResult = 9999999;
// 	for (int i = 0; i < NumSpline; i++)
// 	{
// 		PointCounter = 0;
// 		float NumPoints = RW_SplinePointCount[i];
// 		int NumPointsPerPixel = ceil(NumPoints / (THREADGROUPSIZE_X * THREADGROUPSIZE_X));
// 		// NumPointsPerPixel = 1;
// 		float MinDist = 9999999;
// 		for (int j = 0; j < NumPointsPerPixel; j++)
// 		{
// 			int SplineDataNum = MaxPointsPerSpline * i + NumPointsPerPixel * GroupIndex + j;
// 			if (NumPointsPerPixel * GroupIndex + j >= NumPoints) continue;
// 			
// 			float4 SplineData = RW_PointsToSampleBuffer[SplineDataNum];
// 			float Dist = distance(WorldLocation, SplineData.xy);
// 			MinDist = min(MinDist, Dist);
// 			PointsPerPixel[j] = float2(Dist, SplineDataNum);
// 		}
// 		ShareReduction[GroupIndex] = MinDist;
// 		GroupMemoryBarrierWithGroupSync();
// 		
// 		for (uint stride = THREADGROUPSIZE_X * THREADGROUPSIZE_X / 2; stride > 0; stride >>= 1) {
// 			if (GroupIndex < stride) {
// 				ShareReduction[GroupIndex] = min(ShareReduction[GroupIndex], ShareReduction[GroupIndex + stride]);
// 			}
// 			GroupMemoryBarrierWithGroupSync();
// 		}
// 		// float waveMin = WaveActiveMin(MinDist);
// 		//
// 		//
// 		// if (WaveIsFirstLane()) {
// 		// 	groupshared float groupMinBuffer[64]; 
// 		// 	groupMinBuffer[WaveGetLaneIndex()] = waveMin;
// 		// 	GroupMemoryBarrierWithGroupSync();
// 		//
// 		// 	// 树状归约（仅第一个 Wave 参与）
// 		// 	if (WaveGetLaneIndex() == 0) {
// 		// 		for (int stride = 32; stride > 0; stride >>= 1) {
// 		// 			if (GroupIndex < stride) {
// 		// 				groupMinBuffer[GroupIndex] = min(
// 		// 					groupMinBuffer[GroupIndex],
// 		// 					groupMinBuffer[GroupIndex + stride]
// 		// 				);
// 		// 			}
// 		// 			GroupMemoryBarrierWithGroupSync();
// 		// 		}
// 		// 		// 最终结果在 groupMinBuffer[0]
// 		// 	}
// 		// }
//
// 		MinDist = ShareReduction[0];
//
// 		for (int j = 0; j < NumPointsPerPixel; j++)
// 		{
// 			float ThreadDist = MinDist + WorldGroupSize;
// 			float2 PointInPixel = PointsPerPixel[j];
// 			float Dist = PointInPixel.x;
// 			int SplineDataNum = PointInPixel.y;
// 			float4 SplineData = RW_PointsToSampleBuffer[SplineDataNum];
// 			if (Dist < ThreadDist && length(SplineData) != 0)
// 			{
// 				int PreValue;
// 				InterlockedAdd(PointCounter, 1, PreValue);
// 				ShareFindNearestPoint[PreValue] = SplineDataNum;
// 			}
// 		}
// 		GroupMemoryBarrierWithGroupSync();
// 		MinDist = 999999;
// 		int MinDistNum = -1;
// 		float4 MinDistSplineData = -1;
// 		for (int j = 0; j < PointCounter; j++)
// 		{
// 			int SplineDataNum = ShareFindNearestPoint[j];
// 			float4 SplineData = RW_PointsToSampleBuffer[SplineDataNum];
// 			// if (length(SplineData) == 0) continue;
// 			float Dist = distance(WorldLocation, SplineData.xy);
// 			if (Dist < MinDist)
// 			{
// 				MinDist = min(MinDist, Dist);
// 				MinDistSplineData = SplineData;
// 				MinDistSplineData.z = MinDist;
// 				MinDistNum = SplineDataNum;
// 			}
// 		}
// 		//
// 		// float CurrentDist = SampleResult.z;
// 		// int SplineDataPreNum = max(MinDistNum - 1, MaxPointsPerSpline * i);
// 		// int SplineDataNextNum = min(MinDistNum + 1, (MaxPointsPerSpline + 1) * i - 1);
// 		// float4 SplineDataPre = RW_PointsToSampleBuffer[SplineDataPreNum];
// 		// float4 SplineDataNext = RW_PointsToSampleBuffer[SplineDataNextNum];
// 		// float DistPre = distance(WorldLocation, SplineDataPre.xy);
// 		// float DistNext = distance(WorldLocation, SplineDataNext.xy);
// 		// float4 A = MinDistSplineData;
// 		// float4 B = DistPre < DistNext? SplineDataPre : SplineDataNext;
// 		//
// 		// // float Dist = distance(WorldLocation, SplineData.xy);
// 		// float2 AB = A.xy - B.xy;
// 		// float2 AP = WorldLocation - A.xy;
// 		// float lengthAB = length(AB);
// 		// float dotAB = dot(AB, AB);
// 		// float t = dot(AP, AB) / dotAB;
// 		//
// 		// if (lengthAB < 1e-6)
// 		// {
// 		// 	MinDist = length(AP);
// 		// 	if (CurrentDist > MinDist)
// 		// 	{
// 		// 		SampleResult = MinDistSplineData;
// 		// 	}
// 		// }
// 		// else
// 		// {
// 		// 	float3 crossProduct = cross(float3(AB, 0), float3(AP, 0));
// 		// 	MinDist = length(crossProduct) / lengthAB;
// 		// 	
// 		// 	if (CurrentDist > MinDist)
// 		// 	{
// 		// 		float4 LerpSplineData = lerp(A, B, t);
// 		// 		SampleResult = LerpSplineData;
// 		// 		SampleResult.z = MinDist;
// 		// 	}
// 		// }
// 		if (SampleResult.z > MinDist)
// 		{
// 			SampleResult = MinDistSplineData;
// 			SampleResult.z = MinDist;
// 		}
// 		
// 		GroupMemoryBarrierWithGroupSync();
// 	}
// 	// SampleResult.z = 10000;
// 	// SampleResult.z = SampleResult.z > 0 && SampleResult.z < 100;
// 	SampleResult.z /= 100;
// 	SampleResult.z = SampleResult.z < 1;
// 	RW_OutTexture[DispatchThreadId.xy] = SampleResult;
// 	RW_DebugView[DispatchThreadId.xy] = 1;
//
// }
//
// float MinDistTemp = MinDist;
// float CurrentDist = SampleResult.z;
// int SplineDataPreNum = max(MinDistNum - 1, MaxPointsPerSpline * i);
// int SplineDataNextNum = min(MinDistNum + 1, (MaxPointsPerSpline + 1) * i - 1);
// float4 SplineDataPre = RW_PointsToSampleBuffer[SplineDataPreNum];
// float4 SplineDataNext = RW_PointsToSampleBuffer[SplineDataNextNum];
// float DistPre = distance(WorldLocation, SplineDataPre.xy);
// float DistNext = distance(WorldLocation, SplineDataNext.xy);


groupshared float ShareReduction[THREADGROUPSIZE_X * THREADGROUPSIZE_X];
groupshared int ShareFindNearestPoint[MAXPOINTSPERSPLINE];
groupshared int PointCounter;
void AttributeFromSpline(uint3 DispatchThreadId, uint3 GroupThreadId, uint3 GroupId, uint GroupIndex)
{
	float MaxCell;
	RW_OutTexture.GetDimensions(MaxCell, MaxCell);

	const int MaxPointsPerSpline = MAXPOINTSPERSPLINE;
	const int PointsPerPixelMax = (MAXPOINTSPERSPLINE + (THREADGROUPSIZE_X * THREADGROUPSIZE_X) - 1) / (THREADGROUPSIZE_X * THREADGROUPSIZE_X);
	float2 UV = (DispatchThreadId.xy + .5) / MaxCell;
	float2 WorldLocation = BoundsMin + BoundsSize.xy * UV;
	float2 UVMin = (GroupThreadId.xy * THREADGROUPSIZE_X + .5) / MaxCell;
	float2 UVMax = (min(MaxCell - 1, (GroupThreadId.xy + 1 ) * THREADGROUPSIZE_X) +.5) / MaxCell;
	float WorldGroupSize = length(BoundsSize.xy * (UVMax - UVMin));
	
	float4 SampleResult = 1e+10;
	for (int i = 0; i < NumSpline; i++)
	{
		PointCounter = 0;
		float NumPoints = RW_SplinePointCount[i];
		float MinDist = 1e+10;
		int SplineDataNum = MaxPointsPerSpline * i + GroupIndex ;
		if ( GroupIndex < NumPoints)
		{
			float4 SplineData = RW_PointsToSampleBuffer[SplineDataNum];
			MinDist = distance(WorldLocation, SplineData.xy);
		}
		
		ShareReduction[GroupIndex] = MinDist;
		GroupMemoryBarrierWithGroupSync();
		
		for (uint stride = THREADGROUPSIZE_X * THREADGROUPSIZE_X / 2; stride > 0; stride >>= 1) {
			if (GroupIndex < stride) {
				ShareReduction[GroupIndex] = min(ShareReduction[GroupIndex], ShareReduction[GroupIndex + stride]);
			}
			GroupMemoryBarrierWithGroupSync();
		}
		MinDist = ShareReduction[0];

		float ThreadDist = MinDist + WorldGroupSize;
		float4 SplineData = RW_PointsToSampleBuffer[SplineDataNum];
		if (MinDist < ThreadDist && length(SplineData) != 0)
		{
			int PreValue;
			InterlockedAdd(PointCounter, 1, PreValue);
			ShareFindNearestPoint[PreValue] = SplineDataNum;
		}
		
		GroupMemoryBarrierWithGroupSync();
		MinDist = 1e+10;
		int MinDistNum = -1;
		float4 MinDistSplineData = -1;
		for (int j = 0; j < PointCounter; j++)
		{
			int SplineDataNum = ShareFindNearestPoint[j];
			float4 SplineData = RW_PointsToSampleBuffer[SplineDataNum];
			// if (length(SplineData) == 0) continue;
			float Dist = distance(WorldLocation, SplineData.xy);
			if (Dist < MinDist)
			{
				MinDist = min(MinDist, Dist);
				MinDistSplineData = SplineData;
				MinDistSplineData.z = MinDist;
				MinDistNum = SplineDataNum;
			}
		}
		float MinDistTemp = MinDist;
		float CurrentDist = SampleResult.z;
		int SplineDataPreNum = MinDistNum - 1 < MaxPointsPerSpline * i ? MinDistNum + 1 : MinDistNum - 1;
		int SplineDataNextNum = MinDistNum + 1> MaxPointsPerSpline * i + NumPoints - 1? MinDistNum - 1 : MinDistNum + 1;
		float4 SplineDataPre = RW_PointsToSampleBuffer[SplineDataPreNum];
		float4 SplineDataNext = RW_PointsToSampleBuffer[SplineDataNextNum];
		float DistPre = distance(WorldLocation, SplineDataPre.xy);
		float DistNext = distance(WorldLocation, SplineDataNext.xy);
		
		// float4 A = MinDistSplineData;
		// float4 B = DistPre < DistNext? SplineDataPre : SplineDataNext;
		// float2 AB = B.xy - A.xy;
		// float2 AP = WorldLocation - A.xy;
		// float dotAB = dot(AB, AB);
		// float t = dot(AP, AB) / dotAB;
		//
		// t = clamp(t, 0, 1);
		//
		// if (dotAB < 1e-6)
		// {
		// 	MinDist = length(AP);
		// 	if (CurrentDist > MinDist)
		// 	{
		// 		// SampleResult = MinDistSplineData;
		// 		SampleResult.z = MinDist;
		// 	}
		// }
		// else
		// {
		// 	float2 MinPos = A.xy + t * AB;
		// 	MinDist = distance(MinPos, WorldLocation);
		// 	if (CurrentDist > MinDist)
		// 	{
		// 		float4 LerpSplineData = lerp(A, B, t);
		// 		// SampleResult = LerpSplineData;
		// 		SampleResult.z = MinDist;
		// 	}
		// }

				
		float4 A = MinDistSplineData;
		float4 B = DistPre < DistNext? SplineDataPre : SplineDataNext;
		float4 B1 = DistPre < DistNext? SplineDataNext : SplineDataPre;
		float4 B2 = DistPre < DistNext? SplineDataPre : SplineDataNext;
				
		float2 AB1 = B1.xy - A.xy;
		float2 AB2 = B2.xy - A.xy;
		float2 AP = WorldLocation - A.xy;
		float dotAB1 = abs(dot(AB1, AB1));
		float t1 = abs(dot(AP, AB1)) / dotAB1;
		float dotAB2 = abs(dot(AB2, AB2));
		float t2 = abs(dot(AP, AB2)) / dotAB2;
		t1 = clamp(t1, 0, 1);
		t2 = clamp(t2, 0, 1);
				
		if (dotAB1 < 1e-6 || dotAB2 < 1e-6)
		{
			if (CurrentDist > MinDist)
			{
				// SampleResult = MinDistSplineData;
				SampleResult.z = MinDist;
			}
		}
		else
		{
			float2 MinPos1 = A.xy + t1 * AB1;
			float MinDist1 = distance(MinPos1, WorldLocation);
			float2 MinPos2 = A.xy + t2 * AB2;
			float MinDist2 = distance(MinPos2, WorldLocation);
			float t = 0;
			// MinDist1 = 99999;
			if (MinDist1 < MinDist2)
			{
				MinDist = MinDist1;
				t = t1;
				B = B1;
			}
			else
			{
				MinDist = MinDist2;
				t = t2;
				B = B2;
			}
			if (CurrentDist > MinDist)
			{
				float4 LerpSplineData = lerp(A, B, t);
				// SampleResult = LerpSplineData;
				SampleResult.z = MinDist;
			}
		}
		
		if (SampleResult.y > MinDistTemp)
		{
			// SampleResult = MinDistSplineData;
			SampleResult.y = MinDistTemp;
		}
		
		GroupMemoryBarrierWithGroupSync();
	}
	// SampleResult.z = 10000;
	// SampleResult.z = SampleResult.z > 0 && SampleResult.z < 100;
	SampleResult.z /= 1000;
	SampleResult.y /= 100;
	// SampleResult.z = SampleResult.z < 1;
	RW_OutTexture[DispatchThreadId.xy] = SampleResult;
	RW_DebugView[DispatchThreadId.xy] = 1;
	
	
}

void RasterizeSpline(uint3 DispatchThreadId, uint3 GroupThreadId, uint3 GroupId, uint GroupIndex)
{
	if (DispatchThreadId.x > RW_SplinePointCount[0]) return;
	float MaxCell;
	RW_OutTexture.GetDimensions(MaxCell, MaxCell);
	
	float2 UV = (RW_PointsToSampleBuffer[DispatchThreadId.x].xy - BoundsMin.xy) / BoundsSize.xy;
	RW_OutTexture[uint2(UV * MaxCell)] = 11;
	// RW_OutTexture[uint2(DispatchThreadId.x, 0)].x = UV.x > 1;
	
}

[numthreads(THREADGROUPSIZE_X, THREADGROUPSIZE_Y, THREADGROUPSIZE_Z)]
void SampleSpline(
						uint3 GroupId : SV_GroupID,
						uint3 DispatchThreadId : SV_DispatchThreadID,
						uint3 GroupThreadId : SV_GroupThreadID,
						uint GroupIndex : SV_GroupIndex) 
{
#if SS_SAMPLESPLINE
	AttributeFromSpline(DispatchThreadId, GroupThreadId, GroupId, GroupIndex);
#elif SS_RASTERIZESPLINE
	RasterizeSpline(DispatchThreadId, GroupThreadId, GroupId, GroupIndex);
#endif

}
