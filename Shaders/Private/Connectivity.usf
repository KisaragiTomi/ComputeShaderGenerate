#include "/Engine/Public/Platform.ush"
#include "General.usf"

#define CONNECTIVITYSTEP_CP_Init 0
#define CONNECTIVITYSTEP_CP_FindIslands 1
#define CONNECTIVITYSTEP_CP_Swap 2
#define CONNECTIVITYSTEP_CP_Count 3
#define CONNECTIVITYSTEP_CP_DrawTexture 4
SamplerState Sampler;


Texture2D<float4> InputTexture;
RWTexture2D<float4> RW_ConnectivityPixel;
RWTexture2D<float4> RW_DebugView;

RWTexture2D<float4> RW_LabelBufferA;
RWTexture2D<float4> RW_LabelBufferB;

RWBuffer<uint> RW_LabelCounters;
int Channel;
//ConsumeStructuredBuffer<uint> FreeLabels;

void CPF_Init(Texture2D<float4> InputMap, uint3 DispatchThreadId, RWTexture2D<float4> LabelBufferA, RWTexture2D<float4> LabelBufferB)
{
	float MaxCell = 0;
	InputMap.GetDimensions(MaxCell, MaxCell);
	MaxCell -= 1;
	if (InputMap[DispatchThreadId.xy][Channel] > 0)
	{
		// 使用像素坐标生成唯一标签
		float label = DispatchThreadId.y * MaxCell + DispatchThreadId.x + 1; // +1避免0冲突
		//label /= 100000.0;
		LabelBufferA[DispatchThreadId.xy] = label;
		
		LabelBufferB[DispatchThreadId.xy] = label;
		RW_DebugView[DispatchThreadId.xy] = label;
	} else
	{
		LabelBufferA[DispatchThreadId.xy] = 0;
		LabelBufferB[DispatchThreadId.xy] = 0;
		RW_DebugView[DispatchThreadId.xy] = 0;
	}
	// uint currentLabel = LabelBufferA[DispatchThreadId.xy];
	//RW_DebugView[DispatchThreadId.xy] = float4(.1,.1, 0, 0);
	//RW_ConnectivityPixel[DispatchThreadId.xy] = 0;
}

void CPF_Findislands(Texture2D<float4> InputMap, uint3 DispatchThreadId, RWTexture2D<float4> LabelBufferA, RWTexture2D<float4> LabelBufferB)
{
	float4 currentLabel = LabelBufferA[DispatchThreadId.xy];
	//RW_DebugView[DispatchThreadId.xy] = LabelBufferA[DispatchThreadId.xy];
	if (currentLabel.x == 0) return;

	float MaxCell = 0;
	InputMap.GetDimensions(MaxCell, MaxCell);
	MaxCell -= 1;
	static const uint2 directionOffsets[4] = {
		uint2(0, 1),   
		uint2(0, -1), 
		uint2(-1, 0), 
		uint2(1, 0)   
	};
	// 四邻域采样（上、下、左、右）
	float minNeighbor = currentLabel.x;
	for (int i = 0; i < 4; i++)
	{
		
		float4 LabelValue =  LabelBufferA[clamp(DispatchThreadId.xy + directionOffsets[i], uint2(0, 0), uint2(MaxCell, MaxCell))];
		if (LabelValue.x == 0)
			continue;
		minNeighbor = min(minNeighbor, LabelValue.x);
	}

	// 写入双缓冲的下一帧
	LabelBufferB[DispatchThreadId.xy] = min(currentLabel, minNeighbor);
	//RW_DebugView[DispatchThreadId.xy] = min(currentLabel, minNeighbor);
	//RW_DebugView[DispatchThreadId.xy] = float4(.1,0, 0, 0);
}

// void CPF_Swap(uint3 DispatchThreadId, RWTexture2D<float4> LabelBufferA, RWTexture2D<float4> LabelBufferB)
// {
//
// 	LabelBufferA[DispatchThreadId.xy] = LabelBufferB[DispatchThreadId.xy];
// 	//RW_DebugView[DispatchThreadId.xy] = 1;
// 	//RW_DebugView[DispatchThreadId.xy] = float4(.1,.1, 1, 0);
// }

void CPF_Count(uint3 DispatchThreadId, RWTexture2D<float4> LabelBufferA, RWBuffer<uint> LabelCounters)
{
	uint label = (uint)LabelBufferA[DispatchThreadId.xy].x;
	uint test  = 0;
	if (label != 0)
	{
		InterlockedAdd(LabelCounters[label], 1, test);
		RW_DebugView[DispatchThreadId.xy].x = test;
	}
	//RW_DebugView[DispatchThreadId.xy] = 1;
	
}

void CPF_DrawTexture( RWTexture2D<float4> OutputColor, uint3 DispatchThreadId, RWTexture2D<float4> LabelBufferA, RWBuffer<uint> LabelCounters)
{
	
	// uint label = (uint)LabelBufferA[DispatchThreadId.xy].x;
	// if (label == 0) {
	// 	OutputColor[DispatchThreadId.xy] = float4(0, 0, 0, 1); // 背景黑色
	// 	return;
	// }

	// // 读取该标签的像素数量
	// float count = LabelCounters[label];
	//
	// float MaxCell = 0;
	// OutputColor.GetDimensions(MaxCell, MaxCell);
	// // 归一化颜色映射（假设最大岛屿为MaxCount）
	// float intensity = saturate(count / (MaxCell * MaxCell) * 4);
	// OutputColor[DispatchThreadId.xy] = float4(intensity, count, 0, 1); // 红色通道表示大小
	//RW_DebugView[DispatchThreadId.xy] = float4(.1,0, 0, 0);
}

[numthreads(THREADGROUPSIZE_X, THREADGROUPSIZE_Y, THREADGROUPSIZE_Z)]
void ConnectivityPixel(
					   uint3 DispatchThreadId : SV_DispatchThreadID,
					   uint GroupIndex : SV_GroupIndex)
{
#if CONNECTIVITYSTEP == CONNECTIVITYSTEP_CP_Init
	CPF_Init(InputTexture, DispatchThreadId, RW_LabelBufferA, RW_LabelBufferB);
#elif CONNECTIVITYSTEP == CONNECTIVITYSTEP_CP_FindIslands 
	// CPF_Findislands(InputTexture, DispatchThreadId, RW_LabelBufferA, RW_LabelBufferB);

#elif CONNECTIVITYSTEP == CONNECTIVITYSTEP_CP_Count
	// CPF_Count(DispatchThreadId, RW_LabelBufferA, RW_LabelCounters);

#elif CONNECTIVITYSTEP == CONNECTIVITYSTEP_CP_DrawTexture
	// CPF_DrawTexture(InputTexture, RW_ConnectivityPixel, DispatchThreadId, RW_LabelBufferA, RW_LabelCounters);
	
#endif
}